name: VMB build

on:
  push:
    branches: [ "master", "steamtest" ]
  pull_request:
    branches: [ "master" ]
    
jobs:
  build_n_release:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      # Microsoft Visual C++ 2010 Service Pack needs to be installed for VT2 SDK to run
      - name: get redist
        run: |
          Invoke-WebRequest -URI https://download.microsoft.com/download/1/6/5/165255E7-1014-4D0A-B094-B6A430A6BFFC/vcredist_x64.exe -Outfile vcredist_x64.exe
      - name: extract redist setup
        run: |
          7z x vcredist_x64.exe -ox64 -aou          
      - name: install redist
        run: Start-Process -FilePath "x64/Setup.exe" -ArgumentList "/passive" -Wait -Passthru;

      - name: install steamcmd
        run: |
          Invoke-WebRequest -URI https://steamcdn-a.akamaihd.net/client/installer/steamcmd.zip -Outfile steamcmd.zip
          7z x steamcmd.zip -aou

      - name: test
        run: ls
      
      - name: initailize steamcmd
        run: |
          .\steamcmd +login anonymous +quit || true

      - name: login steamcmd
        env:
          STEAM_USER: ${{ secrets.STEAM_USER }}
          STEAM_PWD: ${{ secrets.STEAM_PASSWORD }}
          STEAM_TOKEN: ${{ secrets.STEAM_TOKEN }}
        run: |
          # [System.Text.Encoding]::UTF8.GetString([convert]::FromBase64String(("${{ secrets.STEAM_TOKEN }}"))) > config/config.vdf
          # cd config/
          # [System.Text.Encoding]::UTF8.GetString([convert]::FromBase64String(("${{ secrets.STEAM_TOKEN }}"))) > config.vdf
          # ls
          # cd ..
          .\steamcmd +login "${{ secrets.STEAM_USER }}" "${{ secrets.STEAM_PASSWORD }}" +quit

      - name: Download VT2 SDK
        run: |
          .\steamcmd force_install_dir ./V2_sdk/ +quit
          .\steamcmd +login "${{ secrets.STEAM_USER }}" "${{ secrets.STEAM_PASSWORD }}" +app_update 866060 validate +quit
          cd steamapps
          cd common
          cd "Vermintide 2 SDK"
          echo $PWD
          ls
          cd ..
          cd ..
          cd ..
        
      # Downloads latest VMB release and setsup folders needed to build mods
      - name: Download VMB Release
        uses: robinraju/release-downloader@v1.8
        with:
          repository: "Vermintide-Mod-Framework/Vermintide-Mod-Builder"
          latest: true
          fileName: "vmb-1.8.2.zip"
          zipBall: true
      - name: Extract VMB
        run: 7z x vmb-1.8.2.zip -aou
      # - name: Setup Mod-Build Dirs
      #   run: |
      #     .\vmb.exe create tanzen
      #     New-Item -ItemType Directory -Force -Path "mods/.temp"
      #     New-Item -ItemType Directory -Force -Path "mods/${{ vars.MOD_NAME }}"
      #     New-Item -ItemType Directory -Force -Path "workshop/content/552500/${{ vars.WORKSHOP_ID }}"
      #     New-Item -ItemType Directory -Force -Path "VT2-SDK"

      - name: Configure VMB
        run: |
          .\vmb.exe config
          $vmbrc = Get-Content "$PWD/.vmbrc" -raw | ConvertFrom-Json
          $vmbrc.fallback_tools_dir2 = "$PWD/steamapps/common/Vermintide 2 SDK"
          $vmbrc.fallback_steamapps_dir2 = "/"
          $vmbrc | ConvertTo-Json -depth 32| set-content "$PWD/.vmbrc"
          New-Item -ItemType Directory -Force -Path "mods/.temp"
          # New-Item -ItemType Directory -Force -Path "mods/${{ vars.MOD_NAME }}"
          New-Item -ItemType Directory -Force -Path "workshop/content/552500/${{ vars.WORKSHOP_ID }}"
          New-Item -ItemType Directory -Force -Path "VT2-SDK"

      - name: Create Mod
        run: .\vmb.exe create tanzen

      # Builds Mod
      - name: Checkout Mod Files
        uses: actions/checkout@v3
        with:
          path: mods/${{ vars.MOD_NAME }}
          sparse-checkout: ''
      - name: Build Mod
        run: .\vmb.exe build ${{ vars.MOD_NAME }} --verbose

      # - name: Release
      #   if: contains(fromJSON('["push"]'), github.event_name)
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     name: ${{ vars.MOD_NAME }}-${{ github.ref_name }}
      #     tag_name: ${{ github.ref_name }}
      #     generate_release_notes: True
      #     files: |
      #       mods/${{ vars.MOD_NAME }}/bundleV2/*
      
